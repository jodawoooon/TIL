

**자바 ORM 표준 JPA 프로그래밍** 공부 기록

<br><br>

### 📍 연관관계 매핑 시 고려사항 3가지

* 다중성
	@ManyToOne, @OneToMany, @OneToOne, @ManyToMany ...
다중성을 판단하기 어려울 때는 반대방향을 생각해보면 된대. (대칭성)
보통 다대일, 일대다를 사용하고 다대다는 실무에서 거의 사용하지 않는다.

* 단방향, 양방향
	* 테이블
	외래 키 하 나로 양쪽 조인 가능하므로 사실상 방향이라는 개념이 없다
	* 객체
	참조용 필드를 가지고 있는 객체만 연관된 객체 조회 가능
	객체 관계에서 한 쪽만 참조하는 것을 단방향, 양쪽이 서로 참조하면 양방향
	(사실 양방향도 단방향 2개)

* 연관관계의 주인
	* 테이블은 외래 키 하나로 두 테이블이 연관관계 맺음
	* 객체 양방향은 참조가 2군데이다.
		* 둘 중 테이블의 외 키를 관리할 곳을 지정해야함
=> 연관관계의 주인 : 외래 키를 관리하는 참조

<br><br>

### 📍 다대일
가장 많이 사용하는 연관관계이다.
다대일의 반대는 일대다이다. 양방향은 외래 키가 있는 쪽이 연관관계의 주인이며 양방향 연관관계는 양쪽을 서로 참조하도록 개발해야 한다.


<br><br>

### 📍 일대다 단방향

일대다 단방향은 일(1)이 연관관계의 주인이다.
디비 설계 상 테이블 일대다 관계는 무조건 다(N) 쪽에 FK가 들어간다.
매핑한 객체가 관리하는 외래 키가 다른 테이블에 있게 된다.

<br>

* 일대다 단방향으로 매핑한 Team, Member 엔티티
```java
@Entity
public class Team {
    @Id
    @GeneratedValue
    @Column(name="TEAM_ID")
    private Long id;
    private String name;

    @OneToMany
    @JoinColumn(name="TEAM_ID")
    private List<Member> members = new ArrayList<>();

	...
}


@Entity
public class Member {

    @Id @GeneratedValue
    @Column(name="MEMBER_ID")
    private Long id;

    private String userName;
    
    ...
}
```

@JoinColumn을 꼭 사용해야 한다. 그렇지 않으면 조인 테이블 방식을 사용한다.

<br>
* Hibernate 쿼리 문

```java
Hibernate: 
   insert 
        into
            Member
            (userName, MEMBER_ID) 
        values
            (?, ?)
Hibernate: 
    insert 
        into
            Team
            (name, TEAM_ID) 
        values
            (?, ?)
Hibernate: 
    update
        Member 
    set
        TEAM_ID=? 
    where
        MEMBER_ID=?
```
<br>

* 일대다 단방향 매핑의 단점
자기 테이블에 외래 키가 있으면 엔티티의 저장과 연관관계 처리를 `insert sql`로 한 번에 처리할 수 있지만 다른 테이블에 있으면 `update sql`을 추가로 실행해야 한다. <br>
성능 문제도 있지만 관리도 부담스럽다. 
=> 일대다 단방향 대신 다대일 양방향 권장


<br><br>

### 📍 일대다 양방향
공식적으로 존재하지 않는다. 대신 다대일 양방향 매핑을 사용해야 한다.

양방향 매핑에서 `@OneToMany`는 연관관계의 주인이 될 수 없다. 그러나 완전 불가능한 건 아니다. 일대다 단방향 매핑 반대편에 외래 키를 사용하는 다대일 단방향 매핑을 **읽기전용**으로 추가한다.

<br>

```java
    @ManyToOne
    @JoinColumn(name="TEAM_ID", insertable=false, updatable=false)
    private Team team;
```

둘다 같은 키를 관리하면 문제가 생길 수 있으므로 다대일 쪽에는 `insertable=false, updatable=false`로 설정해서 읽기만 가능하게 함

이는 일대다 양방향 매핑이라기보다는 일대다 단방향 매핑 반대편에 다대일 단방향 매핑을 읽기 전용으로 추가해서 일대다 양방향 처럼 보이게 하는 방법이다



될 수 있으면 다대일 양방향 쓰자 그냥~

<br><br>

### 📍 일대일 (1:1)
일대일 관계는 반대도 일대일이다. 일대일은 주 테이블이나 대상 테이블 중에 어느 곳이나 외래 키를 가질 수 있다.

따라서 누가 외래 키를 가질 지 선택해야 한다

#### 주 테이블에 외래키
다대일 양방향 매핑 처럼 외래 키가 있는 곳이 연관관계의 주인이다. 반대편은 `mappedBy` 적용

```java
@Entity
public class Locker {

    @Id @GeneratedValue
    @Column(name="LOCKER_ID")
    private Long id;
    private String name;

    @OneToOne(mappedBy = "locker")
    private Member member;
}

@Entity
public class Member {

    @Id @GeneratedValue
    @Column(name="MEMBER_ID")
    private Long id;

    private String userName;

    @OneToOne
    @JoinColumn(name="LOCKER_ID")
    private Locker locker;

	....
}

```

- 주 객체가 대상 객체의 참조를 가지는 것 처럼 주 테이블에 외래 키를 두고 대상 테이블을 찾음
- JPA 매핑 편리
- 장점 : 주 테이블만 확인해도 대상 테이블에 데이터가 있는지 확인 가능

<br>

#### 대상 테이블에 외래키

```java
@Entity
public class Locker {

    @Id @GeneratedValue
    @Column(name="LOCKER_ID")
    private Long id;
    private String name;

    @OneToOne
    @JoinColumn(name="MEMBER_ID")
    private Member member;
}

@Entity
public class Member {

    @Id @GeneratedValue
    @Column(name="MEMBER_ID")
    private Long id;

    private String userName;

    @OneToOne(mappedby="member")
    private Locker locker;

	....
}

```

대상 테이블에 외래키를 두고 싶으면 양방향으로 매핑한다. `Member` 엔티티 대신에 대상 엔티티인 `Locker`를 연관관계의 주인으로 만들어서 `Locker` 테이블의 외래키를 관리하도록 했다.

- 전통적인 DB 개발자 선호
- 장점 : 테이블 관계를 일대일에서 일대다로 변경할 때 테이블 구조를 유지
- 단점 : 지연 로딩으로 설정해도 항상 즉시 로딩 됨
<br><br>

### 📍 다대다(N:M)

관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관계를 표현할 수 없다. 연결 테이블을 추가해서 일대다, 다대일 관계로 풀어내야함

`@ManyToMany`를 사용하면 연결 테이블을 자동으로 처리해주므로 편리하다. 다만 이를 실무에서 사용하기에는 한계가 있다.

보통 연결 테이블에 추가적인 컬럼을 더 넣어야 하는데 이를 추가하면 @ManyToMany를 사용할 수 없다. 추가한 컬럼들을 매핑할 수 없기 때문이다.

- 다대다 한계 극복
연결 테이블 용 엔티티 추가 (연결 테이블을 엔티티로 승격)
`@ManyToMany`를 `@OneToMany`, `@ManyToOne`로 쪼갠다.

```java
@Entity
public class MemberProduct {
    @Id
    @GeneratedValue
    private Long id;

    @ManyToOne
    @JoinColumn(name="MEMBER_ID")
    private Product product;

    @ManyToOne
    @JoinColumn(name="PRODUCT_ID")
    private Member member;

    private int orderAmount;

    private LocalDateTime orderDate;
}
```

